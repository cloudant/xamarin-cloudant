using System;
using System.Diagnostics;
using System.Threading.Tasks;
using NUnit.Framework;

using Com.Cloudant.Client;

namespace Test.Shared
{
	
	[TestFixture]
	public class CloudantClientSnippetTests
	{
		/*
		private string cloudantUrl = TestConstants.validTestUrl();
		private string DBName = "snippetdb" + DateTime.Now.Ticks;
		private Store remoteStore;


		[TearDown]
		public void TearDown(){
			if (remoteStore != null) {
				Task deleteStoreTask = ((RemoteStore)remoteStore).deleteStore ();
				deleteStoreTask.Wait ();

				if (deleteStoreTask.IsFaulted)
					Debug.WriteLine ("Failed to delete remote DB name: " + DBName + "\nError: " + deleteStoreTask.Exception.Message);
			}
		}


		/// <summary>
		/// Tests the code snippet located at: CloudantToolkit-Xamarin/doc/creating-databases.md
		/// </summary>
		[Test]
		public void CreateRemoteStoreSnippet(){
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			/////////////////////////////////////////////// BEGIN SNIPPET /////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			Uri storeUri = new Uri(cloudantUrl + DBName);

			Task<Store> task = Store.RemoteStore(storeUri);
			task.Wait ();

			if(task.IsFaulted){
				Debug.WriteLine ("Failed to create remote DB name: " + DBName + "\nError: " + task.Exception.InnerException.Message);
				//Handle Error
			}else{
				remoteStore = task.Result;
				Debug.WriteLine("Sucessfully created store: "+remoteStore.Name);
			}

			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////// BEGIN REMOVE CODE ///////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			Assert.NotNull(remoteStore);
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////// END REMOVE CODE ////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////


			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////// END SNIPPET /////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		}
		*/
	}
}